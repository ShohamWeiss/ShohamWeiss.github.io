<!DOCTYPE HTML>
<html lang="en">
<head>
<title>Physics Spheres</title>
<meta charset="utf-8">

<!-- bootrap.css -->
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"
integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
<script defer src="assets/fontawesome-free-6.1.1-web/js/all.js"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">

<!-- bootstap.js -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"
integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN"
crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"
integrity="sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV"
crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"
crossorigin="anonymous"></script>

<!-- jquery -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

<!-- <script defer src="assets/fontawesome/js/all.js"></script> -->
<script defer src="assets/fontawesome-free-6.1.1-web/js/all.js"></script>
<script src="script.js"></script>
<link rel="stylesheet" href="style.css">

<title>Shoham Weiss Project</title>
<link rel="shortcut icon" href="assets/images/user-tie-solid.svg">
</head>


<script id="shader-blinn-phong-vs" type="x-shader/x-vertex">
   precision mediump float;

   attribute vec3 aVertexNormal;
   attribute vec3 aVertexPosition;

   varying vec3 vertexPositionEye3;
   varying vec3 vVertexNormal;
   varying vec3 height;

    uniform mat4 uMVMatrix;
    uniform mat4 uPMatrix;

    void main(void) {

    vVertexNormal = aVertexNormal;
    height = vec3(-1.0*aVertexPosition.z,3.0*aVertexPosition.z,(aVertexPosition.z + 10.0)*(aVertexPosition.z - 1.0)/100.0);
    // Get the vertex position in eye coordinates
    vec4 vertexPositionEye4 = uMVMatrix * vec4(aVertexPosition, 1.0);
    vertexPositionEye3 = vertexPositionEye4.xyz / vertexPositionEye4.w;

     gl_Position = uPMatrix*uMVMatrix*vec4(aVertexPosition, 1.0);
    }
</script>

<script id="shader-blinn-phong-fs" type="x-shader/x-fragment">
  precision mediump float;
  varying vec4 vColor;
  varying vec3 vertexPositionEye3;
  varying vec3 vVertexNormal;

  uniform mat4 uMVMatrix;
  uniform mat3 uNMatrix;
  uniform vec3 uLightPosition;
  uniform vec3 uAmbientLightColor;
  uniform vec3 uDiffuseLightColor;
  uniform vec3 uSpecularLightColor;
  uniform vec3 uAmbientMaterialColor;
  uniform vec3 uDiffuseMaterialColor;
  uniform vec3 uSpecularMaterialColor;
  varying vec3 height;

  uniform float uShininess;

  uniform bool uCheck;
  void main(void) {

    vec3 lightPosition = (uMVMatrix * vec4(uLightPosition,1.0)).xyz;
    // Calculate the vector (l) to the light source
    vec3 vectorToLightSource = normalize(lightPosition - vertexPositionEye3);

    // Transform the normal (n) to eye coordinates
    vec3 normalEye = normalize(uNMatrix * vVertexNormal);

    // Calculate n dot l for diffuse lighting
    float diffuseLightWeightning = max(dot(normalEye,
                                    vectorToLightSource), 0.0);

    // Calculate the reflection vector (r) that is needed for specular light
    vec3 reflectionVector = normalize(reflect(-vectorToLightSource,
                                             normalEye));

    // The camera in eye coordinates is located in the origin and is pointing
    // along the negative z-axis. Calculate viewVector (v)
    // in eye coordinates as:
    // (0.0, 0.0, 0.0) - vertexPositionEye3
    vec3 viewVectorEye = -normalize(vertexPositionEye3);

    ///// blinn-phong
    vec3 h = normalize(vectorToLightSource + viewVectorEye);
    float hdotn = max(dot(normalEye,h), 0.0);
    float specularLightWeightning = pow(hdotn, uShininess);

    // float rdotv = max(dot(reflectionVector, viewVectorEye), 0.0);
    //
    // float specularLightWeightning = pow(rdotv, uShininess);

    // Sum up all three reflection components and send to the fragment shader
    gl_FragColor = vec4(((uAmbientLightColor*uAmbientMaterialColor)
                + (uDiffuseLightColor*(uDiffuseMaterialColor)) * diffuseLightWeightning
                + (uSpecularLightColor*uSpecularMaterialColor) * specularLightWeightning),1.0);
   }
</script>

<base href="../../">
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script defer src="assets/fontawesome/js/all.js"></script>
<link rel="stylesheet" href="style.css">
<script src="projects/Graphical_Physics_Sim/gl-matrix-min.js"></script>
<script src="projects/Graphical_Physics_Sim/webgl-utils.js"></script>
<script src="projects/Graphical_Physics_Sim/simpleModeling.js"></script>
<script src="projects/Graphical_Physics_Sim/MP4.js"></script>
<body onload="startup();">
  <div class="main-wrapper">        
    <section class="p-3 p-lg-2 theme-bg-light">
    <div id="navigation"></div>
    </section>  
    <section class="p-3 p-lg-5 theme-bg">
      <div class="container" style="max-width: none !important;">
      <a href="portfolio.htm" class="btn btn-primary mb-2 mt-2">To portfolio</a>
      <div class="row">
        <div class="col-md-12">
          <div id="canvas-container"></div>
          <h2>Particle system using WebGL.</h2>
          <h5> Particle systems are typically used to model fine-grained physical effects like fire, smoke, and water. This is something simpler and just renders a system of bouncing spheres in 3D.</h5>
          <canvas id="myGLCanvas" width="2000" height="1000" style="width: 90%; height: auto"></canvas>
          <p style="font-size:30px;margin-left:10vw;font-weight:bold;">Move the invisible floor with ArrowUp and ArrowDown</p>
          <button id="but" onclick="reset()" style="font-size:30px;">Clear</button>
          <button id="but" onclick="AddSpheres()" style="font-size:30px;">Add 5</button>
          <form style="font-size:30px;">
            Set Material shininess:
            <input id="shininess" type="number" value="100" style="font-size:30px;">
          </form>
          <p>Note: small balls were made bouncier, but all balls have the same acceleration due to gravity.</p>
        </div>
      </div>
    </div>
    </section>
  
</body>
<script>
  $(document).ready(function() {
      // add navigation htm
      $(function(){
        $("#navigation").load("navigation.htm", function() {
              jQuery('#PortfolioNav').addClass('active');
          }); 
      });
    });
  </script>
</html>